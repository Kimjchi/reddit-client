{"version":3,"sources":["reddit.svg","components/Header.js","features/posts/postsSlice.js","features/posts/Posts.js","features/comments/commentsSlice.js","features/comments/Comments.js","features/posts/Post.js","components/Footer.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["Header","to","className","src","logo","alt","fetchPosts","createAsyncThunk","a","fetch","response","json","data","children","postsSlice","createSlice","name","initialState","posts","currentPost","loading","hasError","reducers","setCurrentPost","state","action","payload","extraReducers","pending","fulfilled","map","d","rejected","selectPosts","selectCurrentPost","actions","Posts","useSelector","dispatch","useDispatch","useEffect","post","subreddit","id","onClick","handleClickPost","title","is_video","thumbnail","controls","autoPlay","loop","muted","media","reddit_video","fallback_url","type","post_hint","url_overridden_by_dest","style","width","fetchComments","postId","commentsSlice","comments","selectComments","Comments","comment","body","Post","useParams","Footer","href","App","path","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","counterSlice","value","status","increment","decrement","incrementByAmount","builder","addCase","store","configureStore","reducer","counter","counterReducer","commentsReducer","postsReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.badd644c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/reddit.cfa96dc8.svg\";","import logo from '../reddit.svg';\nimport { Link } from \"react-router-dom\";\n\nexport default function Header() {\n    return (\n        <header>\n            <Link to=\"/\">\n                <span className=\"header-content\"><img src={logo} className=\"App-logo\" alt=\"logo\" /><h1>Reddit client <span className=\"little-quote\">by Jérémy</span></h1></span>\n            </Link>\n        </header>\n    )\n}","import { createSlice } from \"@reduxjs/toolkit\";\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\n\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n    const response = await fetch('https://www.reddit.com/r/popular.json');\n    const json = await response.json();\n    return json.data.children;\n  });\n\nconst postsSlice = createSlice({\n    name: 'posts',\n    initialState: {\n        posts: [],\n        currentPost: {},\n        loading: false,\n        hasError: false\n    },\n    reducers: {\n        setCurrentPost: (state, action) => {\n            state.currentPost = action.payload;\n        }\n    },\n    extraReducers: {\n      [fetchPosts.pending]: (state, action) => {\n        state.loading = true;\n        state.hasError = false;\n      },\n      [fetchPosts.fulfilled]: (state, action) => {\n        state.loading = false;\n        state.hasError = false;\n        state.posts = (action.payload.map(d => d.data));\n      },\n      [fetchPosts.rejected]: (state, action) => {\n        state.loading = false;\n        state.hasError = true;\n      }\n    }\n});\n\nexport const selectPosts = state => state.posts.posts;\nexport const selectCurrentPost = state => state.posts.currentPost;\nexport const { setCurrentPost } = postsSlice.actions;\nexport default postsSlice.reducer;","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { fetchPosts, selectPosts, setCurrentPost } from \"./postsSlice\";\nimport './Posts.css';\n\nexport default function Posts() {\n    const posts = useSelector(selectPosts);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        // Dispatch request to middleware? \n        dispatch(fetchPosts());\n    }, [dispatch]);\n\n    const handleClickPost = (post) => {\n        dispatch(setCurrentPost(post));\n    };\n\n    return (\n        <div className='cards-container'>\n            {\n                // for each posts add a new post element \n                posts.map(post => (\n                    <Link key={post.id} to={`/post/${post.subreddit}/${post.id}`} onClick={() => handleClickPost(post)}>\n                        <div className=\"card\">\n                            <div className=\"container\">\n                                <h4><b>{post.title}</b></h4>\n                            </div>\n                            {post.is_video && post.thumbnail !== 'nsfw' && (\n                                <video controls autoPlay loop muted>\n                                    <source src={post.media.reddit_video.fallback_url} type=\"video/mp4\" />\n                                Your browser does not support the video tag.\n                                </video>\n                            )}\n                            {post.post_hint !== 'link' && post.is_video !== true && post.thumbnail !== 'self' && post.thumbnail !== 'default' && post.thumbnail !== 'nsfw' && <img src={post.url_overridden_by_dest} alt=\"Avatar\" style={{width: '100%'}} />}                    \n                        </div>\n                    </Link>\n                ))\n            }\n        </div>\n    )\n}","import { createSlice } from \"@reduxjs/toolkit\";\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\n\nexport const fetchComments = createAsyncThunk('comments/fetchComments', async ({postId, subreddit}) => {\n    const response = await fetch(`https://www.reddit.com/r/${subreddit}/${postId}.json`);\n    const json = await response.json();\n    return json[1].data.children;\n  });\n\nconst commentsSlice = createSlice({\n    name: 'comments',\n    initialState: {\n        comments: [],        \n        loading: false,\n        hasError: false\n    },\n    reducers: {\n\n    },\n    extraReducers: {\n        [fetchComments.pending]: (state, action) => {\n            state.loading = true;\n            state.hasError = false;\n        },\n        [fetchComments.fulfilled]: (state, action) => {\n            state.loading = false;\n            state.hasError = false;\n          state.comments = (action.payload.map(d => d.data));\n        },\n        [fetchComments.rejected]: (state, action) => {\n            state.loading = false;\n            state.hasError = true;\n        }\n      }\n});\n\nexport const selectComments = state => state.comments.comments;\n\nexport default commentsSlice.reducer;","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchComments, selectComments } from \"./commentsSlice\";\n\n\nexport default function Comments({ postId, subreddit }) {\n    const comments = useSelector(selectComments);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchComments({postId, subreddit}));\n    }, [dispatch, postId, subreddit]);\n\n    return (\n        <>\n            {\n                comments.map(comment => (\n                    <div key={comment.id} className=\"container\">\n                        <h4><b>{comment.body}</b></h4>\n                    </div>\n                ))\n            }\n        </>\n    )\n}","import { useParams } from \"react-router\";\nimport { useSelector } from \"react-redux\";\nimport Comments from \"../comments/Comments\";\nimport { selectCurrentPost } from \"./postsSlice\";\n\nexport default function Post() {\n    const { postId, subreddit } = useParams();\n    const post = useSelector(selectCurrentPost);\n    return (\n        <>\n        <div className=\"cards-container\">\n            <div className=\"card post-details\">\n                <div className=\"container\">\n                    <h4><b>{post.title}</b></h4>\n                </div>\n                {post.is_video && post.thumbnail !== 'nsfw' && (\n                    <video controls autoPlay loop muted>\n                        <source src={post.media.reddit_video.fallback_url} type=\"video/mp4\" />\n                        Your browser does not support the video tag.\n                    </video>\n                )}\n                {post.post_hint !== 'link' && post.is_video !== true && post.thumbnail !== 'self' && post.thumbnail !== 'default' && post.thumbnail !== 'nsfw' && <img src={post.url_overridden_by_dest} alt=\"Avatar\" style={{width: '100%'}} />}                \n            </div>\n            <Comments postId={postId} subreddit={subreddit} />\n        </div>    \n        </>\n    )\n}","\nexport default function Footer() {\n    return (\n        <footer>\n            <div>Icons made by <a href=\"https://www.freepik.com\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n        </footer>\n    )\n}","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Header from './components/Header';\nimport Posts from './features/posts/Posts';\nimport Post from './features/posts/Post';\nimport Footer from './components/Footer';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Header />\n        <Switch>\n          <Route path=\"/post/:subreddit/:postId\">\n            <Post />\n          </Route>\n          <Route path=\"/\">\n            <Posts/>\n          </Route>\n        </Switch>\n      </Router>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport commentsReducer from '../features/comments/commentsSlice';\nimport postsReducer from '../features/posts/postsSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    comments: commentsReducer,\n    posts: postsReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}